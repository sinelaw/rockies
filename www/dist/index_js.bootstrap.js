"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["index_js"],{

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var rockies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rockies */ \"./node_modules/rockies/index.js\");\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rockies/rockies_bg.wasm'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([rockies__WEBPACK_IMPORTED_MODULE_0__]);\nrockies__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nconst canvas = document.getElementById(\"the-canvas\");\n\nconst SIZE = 64;\nconst CELL_SIZE = Math.min(canvas.clientWidth / SIZE, canvas.clientHeight / SIZE) | 0; // px\n\n\nconst game = rockies__WEBPACK_IMPORTED_MODULE_0__.Game.new(SIZE, SIZE);\nconst width = game.width();\nconst height = game.height();\n\nconst ticks = document.getElementById(\"ticks\");\nconst version = document.getElementById(\"version\");\nconst cells_count = document.getElementById(\"cells-count\");\nconst collisions_count = document.getElementById(\"collisions-count\");\nconst collision_pairs_tested = document.getElementById(\"collision-pairs-tested\");\nconst touches = document.getElementById(\"touches\");\nconst dig_checkbox = document.getElementById(\"dig-checkbox\");\n\ncanvas.height = (CELL_SIZE) * height + 1;\ncanvas.width = (CELL_SIZE) * width + 1;\n\nversion.textContent = game.version();\n\nconst ctx = canvas.getContext('2d');\n\nfunction loadAndSave() {\n\n    let grids_to_save = game.get_grids_to_save();\n    for (const grid_index of grids_to_save) {\n        const grid = game.save_grid(grid_index);\n        // save to LocalStorage\n        localStorage.setItem(`grid_${grid_index}`, grid);\n    }\n\n    // Load grids from LocalStorage \n    let grids_to_load = game.get_grids_to_load();\n    for (const grid_index of grids_to_load) {\n        const grid = localStorage.getItem(`grid_${grid_index}`);\n        if (grid) {\n            game.load_grid(grid_index, grid);\n        }\n    }\n}\n\nconst renderLoop = () => {\n\n    game.tick();\n\n    loadAndSave();\n\n    drawPixels();\n\n    let stats = game.stats();\n\n    ticks.textContent = stats.ticks();\n    cells_count.textContent = stats.cells_count();\n    collisions_count.textContent = (stats.collisions_count() / stats.ticks()) | 0;\n    collision_pairs_tested.textContent = (stats.collision_pairs_tested() / stats.ticks()) | 0;\n\n\n\n    requestAnimationFrame(renderLoop);\n};\n\nconst getIndex = (row, column) => {\n    return row * width + column;\n};\n\nconst drawPixels = () => {\n    const pixelsPtr = game.pixels();\n    const pixels = new Uint32Array(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rockies/rockies_bg.wasm'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()).buffer, pixelsPtr, width * height);\n\n    for (let row = 0; row < height; row++) {\n        for (let col = 0; col < width; col++) {\n            const idx = getIndex(row, col);\n            ctx.beginPath();\n\n            let val = pixels[idx];\n            ctx.fillStyle = \"#\" + val.toString(16).padStart(6, \"0\");\n            //console.log(\"[%d,%d] = %s = %s\", row, col, pixels[idx].toString(16), ctx.fillStyle);\n\n            ctx.fillRect(\n                col * CELL_SIZE + 1,\n                row * CELL_SIZE + 1,\n                CELL_SIZE,\n                CELL_SIZE\n            );\n\n            ctx.stroke();\n        }\n    }\n\n};\n\ndrawPixels();\nrequestAnimationFrame(renderLoop);\n\ncanvas.onmousemove = (e) => {\n    if (e.buttons > 0) {\n        game.click(e.offsetX / (CELL_SIZE + 1), e.offsetY / (CELL_SIZE + 1));\n    }\n};\n\ncanvas.onclick = (e) => {\n    game.click(e.offsetX / (CELL_SIZE + 1), e.offsetY / (CELL_SIZE + 1));\n};\n\ncanvas.addEventListener('blur', function (event) {\n    game.unfocus();\n});\n\nwindow.addEventListener('blur', function (event) {\n    game.unfocus();\n});\n\nlet is_shift_down = () => {\n    return dig_checkbox.checked;\n\n};\n\n// Helper function to find buttons by key\nconst findButtonsByKey = (key) => {\n    return Array.from(document.querySelectorAll('.move-button, .move-button-checkbox')).filter(el => {\n        const keys = (el.dataset.keys || '').split(',');\n        return keys.includes(key.toLowerCase());\n    });\n};\n\n// Helper functions to activate/deactivate buttons\nconst activateButton = (button) => {\n    if (button.classList.contains('move-button-checkbox')) {\n        if (!button.dataset.keys) return; // Skip buttons without key mappings\n        const keys = button.dataset.keys.split(',');\n        keys.forEach(key => {\n            if (pressedKeys.has(key)) {\n                button.checked = true;\n            }\n        });\n        // Trigger the change event so handlers are notified\n        button.dispatchEvent(new Event('change'));\n    } else {\n        button.classList.add('active');\n    }\n};\n\nconst deactivateButton = (button) => {\n    if (button.classList.contains('move-button-checkbox')) {\n        if (!button.dataset.keys) return; // Skip buttons without key mappings\n        const keys = button.dataset.keys.split(',');\n        keys.forEach(key => {\n            if (!pressedKeys.has(key)) {\n                button.checked = false;\n            }\n        });\n        // Trigger the change event so handlers are notified\n        button.dispatchEvent(new Event('change'));\n    } else {\n        button.classList.remove('active');\n    }\n};\n\n// Track currently pressed keys\nconst pressedKeys = new Set();\nlet shiftToggled = false;\n\n// Helper function to normalize key names\nconst normalizeKey = (key) => {\n    key = key.toLowerCase();\n    switch (key) {\n        case 'arrowup': return 'w';\n        case 'arrowdown': return 's';\n        case 'arrowleft': return 'a';\n        case 'arrowright': return 'd';\n        case ' ': return ' ';\n    }\n    return key;\n};\n\nconst findButtonElements = () => {\n    return Array.from(document.querySelectorAll('.move-button, .move-button-checkbox'));\n};\n\n// Update all button states based on currently pressed keys\nconst updateAllButtonStates = () => {\n    const elems = findButtonElements();\n\n    elems.filter(el => {\n        const buttonKeys = (el.dataset.keys || '').split(',').map(k => normalizeKey(k));\n        // For combination buttons (e.g. w+a)\n        if (buttonKeys.every(key => pressedKeys.has(key))) {\n            activateButton(el);\n        } else {\n            deactivateButton(el);\n        }\n    });\n};\n\n// Handle keyboard events\ndocument.onkeydown = (e) => {\n    const key = normalizeKey(e.key);\n    pressedKeys.add(key);\n    touches.textContent = key;\n    game.key_down(key);\n    updateAllButtonStates();\n};\n\ndocument.onkeyup = (e) => {\n    const key = normalizeKey(e.key);\n    pressedKeys.delete(key);\n    touches.textContent = key;\n    game.key_up(key);\n    updateAllButtonStates();\n};\n\n// Clear pressed keys when window loses focus\nwindow.onblur = () => {\n    pressedKeys.clear();\n    updateAllButtonStates();\n};\n\n// Setup control buttons\nconst setupControlButtons = () => {\n    // Special handling for shift checkbox\n    const toggleButtons = document.querySelectorAll('.move-button-checkbox');\n    toggleButtons.forEach(checkbox => {\n        if (!checkbox.dataset.keys) return; // Skip buttons without key mappings\n        const keys = checkbox.dataset.keys.split(',');\n        if (keys.includes('shift')) {\n            const handleChange = () => {\n                if (checkbox.checked) {\n                    pressedKeys.add('shift');\n                    game.key_down('shift');\n                } else {\n                    pressedKeys.delete('shift');\n                    game.key_up('shift');\n                }\n            };\n\n            checkbox.addEventListener('change', handleChange);\n            return; // Skip regular event binding for shift button\n        }\n    });\n\n    const buttons = document.querySelectorAll('.move-button');\n\n    buttons.forEach(button => {\n        if (!button.dataset.keys) return; // Skip buttons without key mappings\n        const keys = button.dataset.keys.split(',');\n\n        console.log(\"Button: \", button, \"Keys: \", keys);\n        const pressKeys = () => keys.forEach(key => game.key_down(key));\n        const releaseKeys = () => keys.forEach(key => game.key_up(key));\n\n        // Mouse events\n        button.addEventListener('mousedown', pressKeys);\n        button.addEventListener('mouseup', releaseKeys);\n        button.addEventListener('mouseleave', releaseKeys);\n\n        // Touch events\n        button.addEventListener('touchstart', (e) => {\n            e.preventDefault(); // Prevent double-firing on mobile\n            pressKeys();\n        });\n        button.addEventListener('touchend', (e) => {\n            e.preventDefault();\n            releaseKeys();\n        });\n        button.addEventListener('touchcancel', (e) => {\n            e.preventDefault();\n            releaseKeys();\n        });\n\n        // Blur event (when button loses focus)\n        button.addEventListener('blur', releaseKeys);\n    });\n\n\n};\n\n// Initialize controls\nsetupControlButtons();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./index.js\n");

/***/ })

}]);